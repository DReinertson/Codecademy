10/28/18 : SQL
  • Clauses perform specific tasks in SQL
  • * : select every column

10/14/18 : Promises
  • used fetch() to make GET and POST requests, check status of responses, catch errors, rendering successful responses onto webpage
  • async GET requests:
      - using await, try...catch
  •
  •
10/13/18 : Requests
  • 4 Most common types: GET, POST, PUT, DELETE 
  • Created a rebrandly account, will create custom API to coordinate with my codecademy work
  • GET mainly used for retrieving data while POST involves storing/updating data, ordering, sending e-mail.
  
10/10/18 : Javascript
  • When creating class that extends parent class : 
      - within constructor, if you are using properties in parent class as well:
          o Make sure that the properites are at the same 'index' of arguments and make sure that when using super(), all arguments go within single super call.

10/3/18 : jQuery cont.
  • Using jQuery methods. Have learned how to target elements with either class / id and started using basic methods. This includes .show(), .hide(), .toggle(), .fadeIn(), .fadeOut(), .fadeToggle()...etc
  • Group all style code in CSS file and add/remove CSS classes from element using jQuery : SEPARATION OF CONCERNS
  
10/2/18 : jQuery
  • Add JS script tag after the closing </body> tag, to ensure it won't affect HTML structure / CSS
  
9/30/18 : Templating with handlebars
  • Library which is meant for reusable html/js
  • Put within the script tag the text that is going to be changed via variables in the js file. That text will traverse the DOM into the JS file, compiled within js and then rendered into a different id, creating the altered text you see. 
  • Looks like each tag using handlebars will use double curly brackets {{}}, with a variable inside. If it is using a statement, if/each/else/etc, It will use hashtag before the statement. 

9/26/18 : Hiatus
  • Took long hiatus from documenting the lessons that i've gone through. Have been reviewing lessons, making sure parts that the parts that I was comfortable with were really engraved into muscle memory and also to make sure there wasn't anything that I was missing (which there was of course).  
      - Learned some more about object literals, how to do shorthand (arrow methods, ternary operators, etc). 
  • Will continue with Advanced Object lessons:
      - don't use semi-colons when declaring properties of object. 
      - arrow functions within objects, 'this' refers to global object, don't use arrow functions with object literals. 
      - Privacy: 
          o placing uderscore before property = don't alter. 
          o setters and getters to change properties values. 
      - Getters:
          o get and return internal properties of object. 
      - Setters:
          o set property values. 
      - Still not sure when to use paranthesis when accessing object methods. 

9/9/18 : Display and positioning
  • Block-level elements
      - Does not allow any other elements to occupy same horizontal space 
      - Will occupy entire width of page by default, but can alter with css properties. 
  • Positioning:
      - Static : Default 
      - Relative : Position element relative to its static position on webpage. 
          o Four offset properties : top, bottom, left, right. 
      - Absolute : All other elements will ignore this element and act like it is not on page. 
      - Fixed : 'fix' element to specific position on the page, regardless of scrolling. 
  • Display (Inline, block, inline-block)
      - Inline : Always be displayed on the same line as surrounding text, cannot alter with width/height properties. 
      - Inline-block : Will appear next to each other, but can alter size with CSS properties. 
      - Clear : Depicts how elements will react when bumped into each other. Valid values are left, right, both, none. 

9/4/18 : Interactive Websites with Javascript
  • Reviewing what I have learned in the past about parent/child components within html
  • Just reviewed document.appendChild(). This could be a way to incorporate a post into a blog for a user.
8/30/18 : Reviewing Javascript
  • Let declares a variable that is explicitly signals that the variable can be reassigned a different value.
  • Const : Cannot reassign the value. 

8/26/18 : Lifecycle methods
  • Mounting
      - ComponentWillMount, called first, will only occur after first call
      - Render (Mounting lifecycle methods and updating lifecycle methods).
      - ComponentDidMount : Good to connect app to external applications (APIs, frameworks). A good place to make AJAX calls. Also where to set timers/intervals
  • Updating lifecycle methods
      - Component updates starting with second render.
      - ComponentWillReceiveProps only gets called if the component will receive props
      - shouldComponentUpdate(nextProps, nextState) : Still before render, after willReceiveProps. 
      - componentWillUpdate : Before render. Interact with things outside of React architecture.
      - render
      - componentDidUpdate(prevProps, prevState) : Usually to interact with things outside React environment (APIs). After render
  • Unmounting
      - when component is removed from DOM. 
      - componentWillUnmount : any methods that require cleanup. 
  • Complete ReactJS porition**

8/26/18 : Props and Proptypes
  • Prop type
      - Either search for property named propType or create one (A static variable outside of component declaration).
  • Adding props to propTypes example
      - Confused by their files. They said that only one file should render HTML-like jsx, but in the BestSeller.js & BookList.js are rendering it. BUT! Nevermind, BestSeller.js just has an injection using curly brackets. BookList.js is the only file that has <foo /> in it, which is the jsx element. 
  • To stateless functional components
      - Same as to stateful components.
  • React forms
      - Want server to know of every character addition/deletion as it occurs, instead of having time-gap where things could be different.
      - To make a dynamically changing userInput text field
          o onChange, run property. Have property setState of input to target.value. use constructor to bind this to property. Within HTML use curly brackets to inject this userInput.
  • Controller vs Uncontrolled 
      - Not maintaining its own internal state vs maintaining (respectively).
      - When giving an <input /> a value attribute, it becomes controlled. 
  • Using a traditional form/submit field vs react form
      - Traditional form when you need to differentiate between a finished form and in-progress form. 
      - 
          

8/22/18 : ReactJS cont.
  • Figured out the problem. Within the Menu.js file within the handleClick(e) property, it was supposed to reference chooseVideo(). I did this.chooseVideo but the correct syntax is this.props.chooseVideo. 
  • Learned the basics of how parent, child and sibling components interact with each other, stateful vs stateless components and the patterns used by programmers. 
  • React Styling :
      - For style Injections, use double curly brackets {{style = background : 'blue'}}
      - Style names written in camelCase instead of hyphenated-lowercase. margin-top vs marginTop. 
  • Separating presentational components from display components :
      - If a component has to have state, make calculations based on props, or manage any other complex logic, then it shouldn't ALSO have to render HTML-like JSX.
      - **Article <https://medium.com/@learnreact/container-components-c0e67432e005>
      - Presentational should have the HTML-like JSX and that's it (May need to define variable with this.props.variable). One render() function and no other properties.
      - Container should have pretty much everything else, calculations, alterations, complex logic, etc.
  • Stateless functional components :
      - const/var/etc FunctionName = () => {return statement}

8/21/18 : ReactJS cont.
  • Can't figure out why my video player assignment isn't working. Will continue in the morning. 

8/19/18 : ReactJS Pt II
  • Component should NEVER update this.props. React components should use props to store information that can be changed only by a different component.
  • States should store information that component itself ccan change. 

8/19/18 : Props & State
  • Passing prop from component to component, rendered different UI based upon props
  • Event handler as a prop. 
      - Names like onClick only create event listeners if they're used on HTML-like JSX elements. Otherwise they're just ordinary prop namnes. I'm more-so confused on what makes Button.js not an HTML-like JSX element but Talker.js is?
          ** https://www.codecademy.com/courses/react-101/lessons/this-props/exercises/handleevent-onevent-props-event?action=resume_content_item **
  • State: 
      - Accesses dynamic information through props and state.
      - In-depth look at classes <https://hacks.mozilla.org/2015/07/es6-in-depth-classes/>?
      - setState({foo : bar}) alters specific key's state based upon the parameter that's within setState(). 
      - Defining an event handler that uses this needs this.methodName.bind(this). <https://reactjs.org/docs/handling-events.html>
      - this.setState() automatically calls render()
  • General thought : 
      - Thinking about using react and its applicability. If you have a lot of tabs to a website (BAC website), It would be so efficient to just have variables and render components to make webpage look the way it does. Only confusing thing for me is how CSS works with React. It seems like it would be harder to adjust CSS using react as opposed to just HTML.
      - Oblique Strategies : May have to start writing these down when I come to a problem. Interesting way to look at how to problem solve. 
      - Took a look at the CSS file for random color, looks exactly the same. Just seems harder to picture for me. 
  • When importing class from different page, need to put class in {}.
      

8/17/18 : Components interaction
  - Can have components call upon each other, if on separate files need to export variables (class, object, etc) from other file and import it on current file. 
  - In example, had a file dedicated to creating a navbar. Navbar had its own class component. Exported class from navbar.js and imported it onto other file. input <NavBar /> into return statement of class component to render a navbar onto the page along with a heading / paragraph. 
  - Could see how this could be useful in maintaining consistency between pages (Slightly annoying to have to type out Navbar/footer divs on every page of webpage) by exporting class, importing it and rendering it (Especially if there are a great deal of pages that you want to have the same information on it). 
  - 
  
8/16/18 : React Authorization Form
  - Using React to check submit/form seems much easier that using HTML and JS separate. Being able to hide and show text via variables seems more effieicent that having to hide/show entire divs based upon criteria. 
  - 

8/16/18 : React Components
  - Logic and conditionals must be inside the render() method but outside the return. 
  - Be sure to import respective libraries for React & ReactDOM. 
  - I can see how component classes and instances can really clean up code, by rendering variables instead of having a lot of HTML/JS noise. 
  - You can use this.instance to refer to an instance within the component class. 
  
8/12/18 : React cont.
  - Basics :
      - Need to use className in JSX, not class = ''.
      - Self closing tags (img, br, etc) need to have '/' within tag
      - When rendering JS within JSX, you need to enclose JS within "{}"
      - Can use dot notation to refer to an object's properties and set them to variables
      - JSX event listeners (i.e. onClick) written with camel capitilization. Value should be a function
      - Don't inject if/then statements into JSX, won't work. 
      - Visited conditionals, ?: notation and &&
      - .map(x, i) to create unique keys for list. 

8/9/18 : React 
  - Deeper learning into react, understanding more about DOM & virtual DOM. More understanding about the frustrations with manipulating the DOM. 
  - http://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/
