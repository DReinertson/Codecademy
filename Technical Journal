8/26/18 : Props and Proptypes
  • Prop type
      - Either search for property named propType or create one (A static variable outside of component declaration).
  • Adding props to propTypes example
      - Confused by their files. They said that only one file should render HTML-like jsx, but in the BestSeller.js & BookList.js are rendering it. BUT! Nevermind, BestSeller.js just has an injection using curly brackets. BookList.js is the only file that has <foo /> in it, which is the jsx element. 

8/22/18 : ReactJS cont.
  • Figured out the problem. Within the Menu.js file within the handleClick(e) property, it was supposed to reference chooseVideo(). I did this.chooseVideo but the correct syntax is this.props.chooseVideo. 
  • Learned the basics of how parent, child and sibling components interact with each other, stateful vs stateless components and the patterns used by programmers. 
  • React Styling :
      - For style Injections, use double curly brackets {{style = background : 'blue'}}
      - Style names written in camelCase instead of hyphenated-lowercase. margin-top vs marginTop. 
  • Separating presentational components from display components :
      - If a component has to have state, make calculations based on props, or manage any other complex logic, then it shouldn't ALSO have to render HTML-like JSX.
      - **Article <https://medium.com/@learnreact/container-components-c0e67432e005>
      - Presentational should have the HTML-like JSX and that's it (May need to define variable with this.props.variable). One render() function and no other properties.
      - Container should have pretty much everything else, calculations, alterations, complex logic, etc.
  • Stateless functional components :
      - const/var/etc FunctionName = () => {return statement}

8/21/18 : ReactJS cont.
  • Can't figure out why my video player assignment isn't working. Will continue in the morning. 

8/19/18 : ReactJS Pt II
  • Component should NEVER update this.props. React components should use props to store information that can be changed only by a different component.
  • States should store information that component itself ccan change. 

8/19/18 : Props & State
  • Passing prop from component to component, rendered different UI based upon props
  • Event handler as a prop. 
      - Names like onClick only create event listeners if they're used on HTML-like JSX elements. Otherwise they're just ordinary prop namnes. I'm more-so confused on what makes Button.js not an HTML-like JSX element but Talker.js is?
          ** https://www.codecademy.com/courses/react-101/lessons/this-props/exercises/handleevent-onevent-props-event?action=resume_content_item **
  • State: 
      - Accesses dynamic information through props and state.
      - In-depth look at classes <https://hacks.mozilla.org/2015/07/es6-in-depth-classes/>?
      - setState({foo : bar}) alters specific key's state based upon the parameter that's within setState(). 
      - Defining an event handler that uses this needs this.methodName.bind(this). <https://reactjs.org/docs/handling-events.html>
      - this.setState() automatically calls render()
  • General thought : 
      - Thinking about using react and its applicability. If you have a lot of tabs to a website (BAC website), It would be so efficient to just have variables and render components to make webpage look the way it does. Only confusing thing for me is how CSS works with React. It seems like it would be harder to adjust CSS using react as opposed to just HTML.
      - Oblique Strategies : May have to start writing these down when I come to a problem. Interesting way to look at how to problem solve. 
      - Took a look at the CSS file for random color, looks exactly the same. Just seems harder to picture for me. 
  • When importing class from different page, need to put class in {}.
      

8/17/18 : Components interaction
  - Can have components call upon each other, if on separate files need to export variables (class, object, etc) from other file and import it on current file. 
  - In example, had a file dedicated to creating a navbar. Navbar had its own class component. Exported class from navbar.js and imported it onto other file. input <NavBar /> into return statement of class component to render a navbar onto the page along with a heading / paragraph. 
  - Could see how this could be useful in maintaining consistency between pages (Slightly annoying to have to type out Navbar/footer divs on every page of webpage) by exporting class, importing it and rendering it (Especially if there are a great deal of pages that you want to have the same information on it). 
  - 
  
8/16/18 : React Authorization Form
  - Using React to check submit/form seems much easier that using HTML and JS separate. Being able to hide and show text via variables seems more effieicent that having to hide/show entire divs based upon criteria. 
  - 

8/16/18 : React Components
  - Logic and conditionals must be inside the render() method but outside the return. 
  - Be sure to import respective libraries for React & ReactDOM. 
  - I can see how component classes and instances can really clean up code, by rendering variables instead of having a lot of HTML/JS noise. 
  - You can use this.instance to refer to an instance within the component class. 
  
8/12/18 : React cont.
  - Basics :
      - Need to use className in JSX, not class = ''.
      - Self closing tags (img, br, etc) need to have '/' within tag
      - When rendering JS within JSX, you need to enclose JS within "{}"
      - Can use dot notation to refer to an object's properties and set them to variables
      - JSX event listeners (i.e. onClick) written with camel capitilization. Value should be a function
      - Don't inject if/then statements into JSX, won't work. 
      - Visited conditionals, ?: notation and &&
      - .map(x, i) to create unique keys for list. 

8/9/18 : React 
  - Deeper learning into react, understanding more about DOM & virtual DOM. More understanding about the frustrations with manipulating the DOM. 
  - http://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/
